import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
data = pd.read_csv('C:/Users/Hello/Desktop/fods/custmer.csv')

# Select relevant features for clustering
features = data[['Purchase History', 'Browsing Behavior', 'Demographics']]

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Determine the optimal number of clusters using the elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(scaled_features)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.title('Elbow Method')
plt.show()

# Based on the elbow method, choose the optimal number of clusters
num_clusters = 3  # You can change this based on the plot

# Perform KMeans clustering
kmeans = KMeans(n_clusters=num_clusters, init='k-means++', random_state=42)
clusters = kmeans.fit_predict(scaled_features)

# Add the cluster labels to the original data
data['Cluster'] = clusters

# Visualize the clusters (for example, using pairplot)
sns.pairplot(data=data, hue='Cluster', diag_kind='kde')
plt.show()

# Analyze the characteristics of each cluster
cluster_means = data.groupby('Cluster').mean()
print(cluster_means)

# Use the clusters for targeted marketing strategies
# You can now tailor your marketing campaigns and promotions for each cluster
